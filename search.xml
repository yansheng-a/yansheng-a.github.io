<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>纯小白的第一步</title>
      <link href="/yansheng/20981.html"/>
      <url>/yansheng/20981.html</url>
      
        <content type="html"><![CDATA[<h1 id="对于图像识别分类问题的简单实现"><a href="#对于图像识别分类问题的简单实现" class="headerlink" title="对于图像识别分类问题的简单实现"></a>对于图像识别分类问题的简单实现</h1><h3 id="以下是我的完整代码"><a href="#以下是我的完整代码" class="headerlink" title="以下是我的完整代码"></a>以下是我的完整代码</h3><p>使用keras进行搭建更为简易，初学者更快上手体验简单的识别效果</p><pre><code>import tensorflow as tffrom keras.models import Sequentialtf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)from keras.layers import Dense, Flattenfrom keras.applications.vgg16 import VGG16from keras import layersfrom keras import models# 加载VGG16模型vgg16 = VGG16(weights=&#39;imagenet&#39;, include_top=False, input_shape=(224, 224, 3))#冻结VGG16模型的所有层for layer in vgg16.layers:layer.trainable = False# 创建新的模型model = Sequential()#创建简单四层卷积池化层，keras有自动计算各层输出图像大小功能# model = models.Sequential()# model.add(layers.Conv2D(32, (3, 3), activation=&#39;relu&#39;,                        #input_shape=(224, 224, 3)))# model.add(layers.MaxPooling2D((2, 2)))# model.add(layers.Conv2D(64, (3, 3), activation=&#39;relu&#39;))# model.add(layers.MaxPooling2D((2, 2)))# model.add(layers.Conv2D(128, (3, 3), activation=&#39;relu&#39;))# model.add(layers.MaxPooling2D((2, 2)))# model.add(layers.Conv2D(128, (3, 3), activation=&#39;relu&#39;))# model.add(layers.MaxPooling2D((2, 2)))#使用vgg16模型model.add(vgg16)model.add(Flatten())#model.add(layers.Flatten())# 添加全连接层model.add(Dense(256,activation=&#39;relu&#39;))# 添加输出层model.add(Dense(4, activation=&#39;softmax&#39;))# 编译模型#参数：损失函数：categorical_crossentropy（交叉损失熵） 优化器adam，评价函数model.compile(loss=&#39;categorical_crossentropy&#39;, optimizer=&#39;adam&#39;, metrics=[&#39;accuracy&#39;]) from keras.preprocessing.image import ImageDataGenerator#超参数训练次数time=135# 数据增强#生成一个数据增强器 1.旋转角度 2.随机错切 3.随机缩放 4.随机翻转一半图像train_datagen = ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)test_datagen = ImageDataGenerator(rescale=1./255)test_datagen1 =ImageDataGenerator(rescale=1./255)# 加载训练集和测试集以及额外增加的额外测试集#参数：目录，形状，批次，返回类型train_set = train_datagen.flow_from_directory(r&#39;C:\Users\LENOVO\车狗猫花\车狗猫花\train&#39;,target_size=(224, 224),batch_size=32,class_mode=&#39;categorical&#39;)test_set = test_datagen.flow_from_directory(r&#39;C:\Users\LENOVO\车狗猫花\车狗猫花\test&#39;,target_size=(224, 224),batch_size=32,class_mode=&#39;categorical&#39;)test_new= test_datagen1.flow_from_directory(r&#39;C:\Users\LENOVO\车狗猫花\车狗猫花\test1&#39;,target_size=(224, 224),batch_size=32,class_mode=&#39;categorical&#39;)#训练模型，更新模型中的权重，即在使损失函数最小#参数 一个sequence即train_set，在epochs执行默认len（sequence）多少次生成器生成数据，迭代次数，验证集合，验证批次history = model.fit_generator(train_set,steps_per_epoch=time,epochs=2,validation_data=test_set,validation_steps=time)model.save(&#39;shiyan1vgg.model&#39;)#保存模型#函数将对应数字标签转换为中文def transform(pred_labels,test_labels):if pred_labels==0 :pred_labels= &quot;狗&quot;if(pred_labels==1):pred_labels= &quot;猫&quot;if pred_labels==2 :pred_labels= &quot;花&quot;if pred_labels==3 :pred_labels=&quot;车&quot;if test_labels==0 :test_labels= &quot;狗&quot;if(test_labels==1):test_labels= &quot;猫&quot;if test_labels==2:test_labels= &quot;花&quot;if test_labels==3:test_labels=&quot;车&quot;    return  pred_labels,test_labels#图像测试import numpy as npimport osimport matplotlib.pyplot as pltfrom matplotlib.font_manager import FontPropertiesfont = FontProperties(fname=r&quot;c:\windows\Fonts\simsun.ttc&quot;, size=15)class_ing = test_settest_images,test_labels = next(class_ing)#预测test_images的值返回每个类别的概率predictions = model.predict(test_images)#取类别最大的概率predicted_labels = np.argmax(predictions,axis=1)#描述图表大小 行列 figize为子图大小 返还一个坐标数组对象即子图对象数组fig,axes=plt.subplots(nrows=4,ncols=8,figsize=(15,10))#将子图对象数组降到一维axes=axes.flatten()for i,img in enumerate(test_images):#将一个一个子图数据显示在2维平面axes[i].imshow(img)#设置轴的属性axes[i].axis(&#39;off&#39;)#为轴上添加标签预测值和真实值predicted_new,test_new =transform(predicted_labels[i],np.argmax(test_labels[i]))title=&quot;Predicted:&quot;+predicted_new+&quot;\nTrue:&quot;+test_newaxes[i].set_title(title,color=&quot;white&quot;,fontproperties=font)#自动调整子图参数使之与子图标签11对应    plt.tight_layout#显示图片plt.show()</code></pre><h3 id="输出效果"><a href="#输出效果" class="headerlink" title="输出效果"></a>输出效果</h3><p><img src="/90904.png" alt="输出效果" title="Magic Gardens"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/yansheng/16107.html"/>
      <url>/yansheng/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
